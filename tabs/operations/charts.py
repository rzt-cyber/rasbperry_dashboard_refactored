import plotly.express as px


class OperationsCharts:
    def __init__(self, data_manager, calculations):
        self.dm = data_manager
        self.calc = calculations

    def create_stock_heatmap_chart(self):
        """Heatmap –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ —Å–∫–ª–∞–¥–∞–º –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            df = self.calc.get_latest_inventory_data()

            df = df.merge(
                self.dm.df_products[["product_id", "category"]], on="product_id"
            )

            heatmap_data = (
                df.groupby(["warehouse_id", "category"])["stock_quantity"]
                .sum()
                .reset_index()
            )

            fig = px.density_heatmap(
                heatmap_data,
                x="warehouse_id",
                y="category",
                z="stock_quantity",
                title="üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –ø–æ —Å–∫–ª–∞–¥–∞–º –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                color_continuous_scale="Blues",
            )

            fig.update_layout(
                plot_bgcolor="rgba(0,0,0,0)",
                paper_bgcolor="rgba(0,0,0,0)",
            )

            return fig
        except Exception as e:
            print(f"Error creating stock heatmap: {e}")
            return self._create_empty_chart("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞")

    def create_issue_resolution_chart(self):
        """–í—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è –ø–æ —Ç–∏–ø–∞–º –ø—Ä–æ–±–ª–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            df = self.calc.get_latest_support_data()

            resolution_by_issue = (
                df.groupby("issue_type")["resolution_time_minutes"].mean().reset_index()
            )
            resolution_by_issue["hours"] = (
                resolution_by_issue["resolution_time_minutes"] / 60
            )

            fig = px.bar(
                resolution_by_issue,
                x="issue_type",
                y="hours",
                title="‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ä–µ—à–µ–Ω–∏—è –ø–æ —Ç–∏–ø–∞–º –ø—Ä–æ–±–ª–µ–º",
                labels={"issue_type": "–¢–∏–ø –ø—Ä–æ–±–ª–µ–º—ã", "hours": "–ß–∞—Å—ã"},
                color="hours",
                color_continuous_scale="Viridis",
            )

            fig.update_layout(
                plot_bgcolor="rgba(0,0,0,0)",
                paper_bgcolor="rgba(0,0,0,0)",
            )

            return fig
        except Exception as e:
            print(f"Error creating issue resolution chart: {e}")
            return self._create_empty_chart("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞")

    def create_ticket_status_chart(self):
        """–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            df = self.calc.get_latest_support_data()

            status_counts = df["resolved"].value_counts().reset_index()
            status_counts["status"] = status_counts["resolved"].apply(
                lambda x: "–†–µ—à–µ–Ω–æ" if x else "–ù–µ —Ä–µ—à–µ–Ω–æ"
            )

            fig = px.pie(
                status_counts,
                values="count",
                names="status",
                title="‚úÖ –°—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏",
                hole=0.4,
                color_discrete_sequence=["#00cc96", "#ef553b"],
            )

            fig.update_layout(
                plot_bgcolor="rgba(0,0,0,0)",
                paper_bgcolor="rgba(0,0,0,0)",
            )

            return fig
        except Exception as e:
            print(f"Error creating ticket status chart: {e}")
            return self._create_empty_chart("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞")

    def create_low_stock_chart(self, threshold=5):
        """–¢–æ–ø —Ç–æ–≤–∞—Ä–æ–≤ —Å –Ω–∏–∑–∫–∏–º –∑–∞–ø–∞—Å–æ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            df = self.calc.get_latest_inventory_data()

            df = df.merge(
                self.dm.df_products[["product_id", "product_name", "category"]],
                on="product_id",
            )

            low_stock = df[df["stock_quantity"] < threshold]

            low_stock_agg = (
                low_stock.groupby(["product_name", "category"])["stock_quantity"]
                .sum()
                .reset_index()
            )
            low_stock_agg = low_stock_agg.nlargest(10, "stock_quantity")

            fig = px.bar(
                low_stock_agg,
                x="stock_quantity",
                y="product_name",
                orientation="h",
                title=f"‚ö†Ô∏è –¢–æ–ø —Ç–æ–≤–∞—Ä–æ–≤ —Å –∑–∞–ø–∞—Å–æ–º < {threshold} –µ–¥.",
                labels={"stock_quantity": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "product_name": "–¢–æ–≤–∞—Ä"},
                color="category",
            )

            fig.update_layout(
                plot_bgcolor="rgba(0,0,0,0)",
                paper_bgcolor="rgba(0,0,0,0)",
                yaxis={"categoryorder": "total ascending"},
            )

            return fig
        except Exception as e:
            print(f"Error creating low stock chart: {e}")
            return self._create_empty_chart("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞")

    def _create_empty_chart(self, message):
        """–°–æ–∑–¥–∞–µ—Ç –ø—É—Å—Ç–æ–π –≥—Ä–∞—Ñ–∏–∫ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ"""
        return {
            "data": [],
            "layout": {
                "title": message,
                "xaxis": {"visible": False},
                "yaxis": {"visible": False},
                "annotations": [
                    {
                        "text": message,
                        "xref": "paper",
                        "yref": "paper",
                        "showarrow": False,
                        "font": {"size": 16},
                    }
                ],
            },
        }
